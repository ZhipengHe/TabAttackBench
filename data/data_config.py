
# Define the dataset URLs and column names
DATASET_INFO = {
    "Adult": {
        "url": "https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data",
        "column_names": ["age", "workclass", "fnlwgt", "education", "education_num", "marital_status",
                            "occupation", "relationship", "race", "sex", "capital_gain", "capital_loss",
                            "hours_per_week", "native_country", "income"],
        "target_col": "income",
        "target_transform": lambda x: "Y" if x == ">50K" else "N",
        "categorical_cols": ["workclass", "education", "marital_status",
                                "occupation", "relationship", "race", "sex", "native_country"],
        "numerical_cols": ["age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week"],

    },
    "Electricity": {
        "url": "https://www.openml.org/data/download/2419/electricity-normalized.arff",
        "column_names": ["date", "day", "period", "nswprice", "nswdemand", "vicprice", "vicdemand", "transfer", "class"],
        "target_col": "class",
        "target_transform": lambda x: "Y" if x == 'UP' else "N",
        "categorical_cols": ["day"], 
        "numerical_cols": ["date", "period", "nswprice", "nswdemand", "vicprice", "vicdemand", "transfer"],
    },
    "Higgs": {
        "url": "https://www.openml.org/data/download/22044863/dataset.arff", 
        "column_names": ["target", "lepton_pT", "lepton_eta", "lepton_phi", "missing_energy_magnitude",
                            "missing_energy_phi", "jet_1_pt", "jet_1_eta", "jet_1_phi", "jet_1_b-tag",
                            "jet_2_pt", "jet_2_eta", "jet_2_phi", "jet_2_b-tag", "jet_3_pt", "jet_3_eta",
                            "jet_3_phi", "jet_3_b-tag", "jet_4_pt", "jet_4_eta", "jet_4_phi", "jet_4_b-tag",
                            "m_jj", "m_jjj", "m_lv", "m_jlv", "m_bb", "m_wbb", "m_wwbb"],
        "target_col": "target", 
        "target_transform": lambda x: "Y" if x == '1' else "N",
        "categorical_cols": [],  # No categorical columns in the Higgs dataset
        "numerical_cols": ["lepton_pT", "lepton_eta", "lepton_phi", "missing_energy_magnitude",
                            "missing_energy_phi", "jet_1_pt", "jet_1_eta", "jet_1_phi", "jet_1_b-tag",
                            "jet_2_pt", "jet_2_eta", "jet_2_phi", "jet_2_b-tag", "jet_3_pt", "jet_3_eta",
                            "jet_3_phi", "jet_3_b-tag", "jet_4_pt", "jet_4_eta", "jet_4_phi", "jet_4_b-tag",
                            "m_jj", "m_jjj", "m_lv", "m_jlv", "m_bb", "m_wbb", "m_wwbb"], 
    },
    "KDDCup09_appetency": { # keep this dataset at this moment, but not used for the paper
        "url": "https://www.openml.org/data/download/53994/KDDCup09_appetency.arff",
        "column_names": ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9",
                            "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17",
                            "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25",
                            "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33",
                            "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41",
                            "Var42", "Var43", "Var44", "Var45", "Var46", "Var47", "Var48", "Var49",
                            "Var50", "Var51", "Var52", "Var53", "Var54", "Var55", "Var56", "Var57",
                            "Var58", "Var59", "Var60", "Var61", "Var62", "Var63", "Var64", "Var65",
                            "Var66", "Var67", "Var68", "Var69", "Var70", "Var71", "Var72", "Var73",
                            "Var74", "Var75", "Var76", "Var77", "Var78", "Var79", "Var80", "Var81",
                            "Var82", "Var83", "Var84", "Var85", "Var86", "Var87", "Var88", "Var89",
                            "Var90", "Var91", "Var92", "Var93", "Var94", "Var95", "Var96", "Var97",
                            "Var98", "Var99", "Var100", "Var101", "Var102", "Var103", "Var104",
                            "Var105", "Var106", "Var107", "Var108", "Var109", "Var110", "Var111",
                            "Var112", "Var113", "Var114", "Var115", "Var116", "Var117", "Var118",
                            "Var119", "Var120", "Var121", "Var122", "Var123", "Var124", "Var125",
                            "Var126", "Var127", "Var128", "Var129", "Var130", "Var131", "Var132",
                            "Var133", "Var134", "Var135", "Var136", "Var137", "Var138", "Var139",
                            "Var140", "Var141", "Var142", "Var143", "Var144", "Var145", "Var146",
                            "Var147", "Var148", "Var149", "Var150", "Var151", "Var152", "Var153",
                            "Var154", "Var155", "Var156", "Var157", "Var158", "Var159", "Var160",
                            "Var161", "Var162", "Var163", "Var164", "Var165", "Var166", "Var167",
                            "Var168", "Var169", "Var170", "Var171", "Var172", "Var173", "Var174",
                            "Var175", "Var176", "Var177", "Var178", "Var179", "Var180", "Var181",
                            "Var182", "Var183", "Var184", "Var185", "Var186", "Var187", "Var188",
                            "Var189", "Var190", "Var191", "Var192", "Var193", "Var194", "Var195",
                            "Var196", "Var197", "Var198", "Var199", "Var200", "Var201", "Var202",
                            "Var203", "Var204", "Var205", "Var206", "Var207", "Var208", "Var209",
                            "Var210", "Var211", "Var212", "Var213", "Var214", "Var215", "Var216",
                            "Var217", "Var218", "Var219", "Var220", "Var221", "Var222", "Var223",
                            "Var224", "Var225", "Var226", "Var227", "Var228", "Var229", "Var230",
                            "APPETENCY"], 
        "target_col": "APPETENCY", 
        "target_transform": lambda x: "Y" if x == '1' else "N",
        "categorical_cols": ["Var191", "Var192", "Var193", "Var194", "Var195",
                            "Var196", "Var197", "Var198", "Var199", "Var200", "Var201", "Var202",
                            "Var203", "Var204", "Var205", "Var206", "Var207", "Var208", "Var209",
                            "Var210", "Var211", "Var212", "Var213", "Var214", "Var215", "Var216",
                            "Var217", "Var218", "Var219", "Var220", "Var221", "Var222", "Var223",
                            "Var224", "Var225", "Var226", "Var227", "Var228", "Var229", "Var230"],
        "numerical_cols": ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9",
                            "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17",
                            "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25",
                            "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33",
                            "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41",
                            "Var42", "Var43", "Var44", "Var45", "Var46", "Var47", "Var48", "Var49",
                            "Var50", "Var51", "Var52", "Var53", "Var54", "Var55", "Var56", "Var57",
                            "Var58", "Var59", "Var60", "Var61", "Var62", "Var63", "Var64", "Var65",
                            "Var66", "Var67", "Var68", "Var69", "Var70", "Var71", "Var72", "Var73",
                            "Var74", "Var75", "Var76", "Var77", "Var78", "Var79", "Var80", "Var81",
                            "Var82", "Var83", "Var84", "Var85", "Var86", "Var87", "Var88", "Var89",
                            "Var90", "Var91", "Var92", "Var93", "Var94", "Var95", "Var96", "Var97",
                            "Var98", "Var99", "Var100", "Var101", "Var102", "Var103", "Var104",
                            "Var105", "Var106", "Var107", "Var108", "Var109", "Var110", "Var111",
                            "Var112", "Var113", "Var114", "Var115", "Var116", "Var117", "Var118",
                            "Var119", "Var120", "Var121", "Var122", "Var123", "Var124", "Var125",
                            "Var126", "Var127", "Var128", "Var129", "Var130", "Var131", "Var132",
                            "Var133", "Var134", "Var135", "Var136", "Var137", "Var138", "Var139",
                            "Var140", "Var141", "Var142", "Var143", "Var144", "Var145", "Var146",
                            "Var147", "Var148", "Var149", "Var150", "Var151", "Var152", "Var153",
                            "Var154", "Var155", "Var156", "Var157", "Var158", "Var159", "Var160",
                            "Var161", "Var162", "Var163", "Var164", "Var165", "Var166", "Var167",
                            "Var168", "Var169", "Var170", "Var171", "Var172", "Var173", "Var174",
                            "Var175", "Var176", "Var177", "Var178", "Var179", "Var180", "Var181",
                            "Var182", "Var183", "Var184", "Var185", "Var186", "Var187", "Var188",
                            "Var189", "Var190"],
    },
    "Mushroom": {
        "url": "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data",
        "column_names": ["class", "cap-shape", "cap-surface", "cap-color", "bruises", "odor", "gill-attachment",
                            "gill-spacing", "gill-size", "gill-color", "stalk-shape", "stalk-root",
                            "stalk-surface-above-ring", "stalk-surface-below-ring", "stalk-color-above-ring",
                            "stalk-color-below-ring", "veil-type", "veil-color", "ring-number", "ring-type",
                            "spore-print-color", "population", "habitat"],
        "target_col": "class",
        "categorical_cols": ["cap-shape", "cap-surface", "cap-color", "bruises", "odor", "gill-attachment",
                                "gill-spacing", "gill-size", "gill-color", "stalk-shape", "stalk-root",
                                "stalk-surface-above-ring", "stalk-surface-below-ring", "stalk-color-above-ring",
                                "stalk-color-below-ring", "veil-type", "veil-color", "ring-number", "ring-type",
                                "spore-print-color", "population", "habitat"],
        "numerical_cols": [],
        "target_transform": lambda x: "Y" if x == "p" else "N",
        "feature_transform": {
            ""
        },
    },
    "Diabetes": {
        "url": "https://www.openml.org/data/download/37/diabetes.arff",
        "column_names": ["preg", "plas", "pres", "skin", "insu", "mass", "pedi", "age", "class"],
        "target_col": "class",
        "categorical_cols": [],
        "numerical_cols": ["preg", "plas", "pres", "skin", "insu", "mass", "pedi", "age"],
        "target_transform": lambda x: "Y" if x == 'tested_positive' else "N",
    },
    "BreastCancer": {
        "url": "local/BreastCancer.csv",
        "column_names": ["id", "diagnosis", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst", "perimeter_worst", "area_worst", "smoothness_worst", "compactness_worst", "concavity_worst", "concave_points_worst", "symmetry_worst", "fractal_dimension_worst"],
        "target_col": "diagnosis",
        "categorical_cols": [],
        "numerical_cols": ["radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst", "perimeter_worst", "area_worst", "smoothness_worst", "compactness_worst", "concavity_worst", "concave_points_worst", "symmetry_worst", "fractal_dimension_worst"],
        "target_transform": lambda x: "Y" if x == 'M' else "N",
    },
    "GermanCredit": {
        "url": "https://www.openml.org/data/download/31/dataset_31_credit-g.arff",
        "column_names": ["checking_status", "duration", "credit_history", "purpose", "credit_amount", "savings_status", "employment", "installment_commitment", "personal_status", "other_parties", "residence_since", "property_magnitude", "age", "other_payment_plans", "housing", "existing_credits", "job", "num_dependents", "own_telephone", "foreign_worker", "class"],
        "target_col": "class",
        "categorical_cols": ["checking_status", "credit_history", "purpose", "savings_status", "employment", "personal_status", "other_parties", "property_magnitude", "other_payment_plans", "housing", "job", "own_telephone", "foreign_worker"],
        "numerical_cols": ["duration", "credit_amount", "installment_commitment", "residence_since", "age", "existing_credits", "num_dependents"],
        "target_transform": lambda x: "Y" if x == 'good' else "N",
    },
    "BankMarketing": {
        "url": "https://www.openml.org/data/download/1586218/phpkIxskf.arff",
        # "column_names": ["age", "job", "marital", "education", "default", "balance", "housing", "loan", "contact", "day", "month", "duration", "campaign", "pdays", "previous", "poutcome", "y"],
        # "target_col": "y",
        # "categorical_cols": ["job", "marital", "education", "default", "housing", "loan", "contact", "month", "poutcome"],
        # "numerical_cols": ["age", "balance", "day", "duration", "campaign", "pdays", "previous"],
        "target_transform": lambda x: "Y" if x == '1' else "N",
        "column_names": ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "Class"],
        "original_column_names": ["age", "job", "marital", "education", "default", "balance", "housing", "loan", "contact", "day", "month", "duration", "campaign", "pdays", "previous", "poutcome", "y"],
        "target_col": "y",
        # "categorical_cols": ["V2", "V3", "V4", "V5", "V7", "V8", "V9", "V11", "V16"],
        # "numerical_cols": ["V1", "V6", "V10", "V12", "V13", "V14", "V15"],
        "categorical_cols": ["job", "marital", "education", "default", "housing", "loan", "contact", "month", "poutcome"],
        "numerical_cols": ["age", "balance", "day", "duration", "campaign", "pdays", "previous"],
    },
    # "WineQuality": {
    #     "url": "https://www.openml.org/data/download/49817/wine_quality.arff",
    #     "column_names": ["fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "chlorides", "free.sulfur.dioxide", "total.sulfur.dioxide", "density", "pH", "sulphates", "alcohol", "quality"],
    #     "target_col": "quality",
    #     "categorical_cols": [],
    #     "numerical_cols": ["fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "chlorides", "free.sulfur.dioxide", "total.sulfur.dioxide", "density", "pH", "sulphates", "alcohol"],
    #     "target_transform": lambda x: "Y" if x >=6 else "N",
    # },
    "WineQuality-Red": { # first 1599 rows
        "url": "https://www.openml.org/data/download/49817/wine_quality.arff",
        "column_names": ["fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "chlorides", "free.sulfur.dioxide", "total.sulfur.dioxide", "density", "pH", "sulphates", "alcohol", "quality"],
        "target_col": "quality",
        "categorical_cols": [],
        "numerical_cols": ["fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "chlorides", "free.sulfur.dioxide", "total.sulfur.dioxide", "density", "pH", "sulphates", "alcohol"],
        "target_transform": lambda x: "Y" if x >=6 else "N",
    },
    "WineQuality-White": { # last 4898 rows
        "url": "https://www.openml.org/data/download/49817/wine_quality.arff",
        "column_names": ["fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "chlorides", "free.sulfur.dioxide", "total.sulfur.dioxide", "density", "pH", "sulphates", "alcohol", "quality"],
        "target_col": "quality",
        "categorical_cols": [],
        "numerical_cols": ["fixed.acidity", "volatile.acidity", "citric.acid", "residual.sugar", "chlorides", "free.sulfur.dioxide", "total.sulfur.dioxide", "density", "pH", "sulphates", "alcohol"],
        "target_transform": lambda x: "Y" if x >=6 else "N",
    },
    "house_16H": {
        "url": "https://www.openml.org/data/download/53355/house_16H.arff",
        "column_names": ["P1", "P5p1", "P6p2", "P11p4", "P14p9", "P15p1", "P15p3", "P16p2", "P18p2", "P27p4", "H2p2", "H8p2", "H10p1", "H13p1", "H18pA", "H40p4", "binaryClass"],
        "target_col": "binaryClass",
        "categorical_cols": [],
        "numerical_cols": ["P1", "P5p1", "P6p2", "P11p4", "P14p9", "P15p1", "P15p3", "P16p2", "P18p2", "P27p4", "H2p2", "H8p2", "H10p1", "H13p1", "H18pA", "H40p4"],
        "target_transform": lambda x: "Y" if x == 'P' else "N",
    },
    "eye_movements": {
        "url": "https://www.openml.org/data/download/53927/eye_movements.arff",
        "column_names": ["lineNo", "assgNo", "fixcount", "firstPassCnt", "P1stFixation", "P2stFixation", "prevFixDur", "firstfixDur", "firstPassFixDur", "nextFixDur", "firstSaccLen", "lastSaccLen", "prevFixPos", "landingPos", "leavingPos", "totalFixDur", "meanFixDur", "nRegressFrom", "regressLen", "nextWordRegress", "regressDur", "pupilDiamMax", "pupilDiamLag", "timePrtctg", "nWordsInTitle", "titleNo", "wordNo", "label"],
        "target_col": "label",
        "categorical_cols": ["P1stFixation", "P2stFixation", "nextWordRegress"],
        "numerical_cols": ["lineNo", "assgNo", "fixcount", "firstPassCnt", "prevFixDur", "firstfixDur", "firstPassFixDur", "nextFixDur", "firstSaccLen", "lastSaccLen", "prevFixPos", "landingPos", "leavingPos", "totalFixDur", "meanFixDur", "nRegressFrom", "regressLen", "regressDur", "pupilDiamMax", "pupilDiamLag", "timePrtctg", "nWordsInTitle", "titleNo", "wordNo"],
        "target_transform": lambda x: "Y" if x == '1' or x == '2' else "N",
    },
    "jm1": {
        "url": "https://www.openml.org/data/download/53936/jm1.arff",
        "column_names": ["loc", "v(g)", "ev(g)", "iv(g)", "n", "v", "l", "d", "i", "e", "b", "t", "lOCode", "lOComment", "lOBlank", "locCodeAndComment", "uniq_Op", "uniq_Opnd", "total_Op", "total_Opnd", "branchCount", "defects"],
        "target_col": "defects",
        "categorical_cols": [],
        "numerical_cols": ["loc", "v(g)", "ev(g)", "iv(g)", "n", "v", "l", "d", "i", "e", "b", "t", "lOCode", "lOComment", "lOBlank", "locCodeAndComment", "uniq_Op", "uniq_Opnd", "total_Op", "total_Opnd", "branchCount"],
        "target_transform": lambda x: "Y" if x == 'true' else "N",
    }
}